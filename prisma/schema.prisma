// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  phone_number String @unique
  profile_image String
  gender Gender
  blood_group BloodGroup
  role String @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin{
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  phone_number String @unique
  profile_image String
  gender Gender
  blood_group BloodGroup
  role String @default("admin")
  department AdminDepartment @default(USER_MANAGEMENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Psychologist{
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  phone_number String @unique
  profile_image String
  gender Gender
  blood_group BloodGroup
  role String @default("psychologist")
  timeSlot String
  degree String
  dayOff WeekDays @default(FRIDAY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course{
  id String @id @default(uuid())
  title String
  description String
  cover_photo String
  duration String
  price Int
  discount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model ServiceDepartment{
  id String @id @default(uuid())
  title ServiceDepartmentOptions @default(DOCTOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ServiceDepartmentOptions {
  DOCTOR
  PSYCHOLOGIST
}

model UserEnrolledCourse{
  id String @id @default(uuid())
  status UserEnrolledCourseStatus? @default(ONGOING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id])

  courseId String
  course Course @relation(fields: [courseId], references: [id])
}

enum UserEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Role {
  super_admin
  admin
  user
  psychologist
  doctor
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum AdminDepartment {
  USER_MANAGEMENT
  COURSE_MANAGEMENT
  PSYCHOLOGIST_MANAGEMENT
  DOCTORS_MANAGEMENT
}