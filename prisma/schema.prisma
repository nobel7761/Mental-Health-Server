// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum Role {
  PATIENT
  ADMIN
  SUPER_ADMIN
  PSYCHOLOGIST
  DOCTOR
}

enum Department {
  PATIENT_DEPARTMENT
  PSYCHOLOGIST_DEPARTMENT
  DOCTOR_DEPARTMENT
}

enum DayOff {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model Patient {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  phone_number  String    @unique
  profile_image String
  gender        Gender
  blood_group   BloodGroup
  role          Role      @default(PATIENT)
  area          String[]
  fees          Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  bookingHistories BookingHistory[]
}

model Admin {
  id         String  @id @default(uuid())
  name       String
  email      String  @unique
  password   String
  phone_number String @unique
  profile_image String
  gender     Gender
  blood_group BloodGroup
  role       Role
  department  Department?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Specialist {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  phone_number  String   @unique
  profile_image String
  gender        Gender
  blood_group   BloodGroup
  role          Role     @default(PSYCHOLOGIST)
  startTime     String
  endTime       String
  slots         String[]
  degrees       String[]
  dayOff        DayOff   @default(FRIDAY)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  bookings      Booking[]
  bookingHistories BookingHistory[]
}

model Booking{
  id            String @id @default(uuid())
  date          DateTime
  slot          String
  status        BookingStatus @default(PENDING)
  is_payment_completed Boolean @default(false)

  patient_id    String
  patient       Patient @relation(fields: [patient_id], references: [id])

  specialist_id String
  specialist    Specialist @relation(fields: [specialist_id], references: [id])

  createdAt     DateTime @default(now()) 
  updatedAt     DateTime @updatedAt
}

model BookingHistory {
  id                 String   @id @default(uuid())
  date               DateTime
  status             BookingStatus

  patient_id          String
  patient            Patient   @relation(fields: [patient_id], references: [id])

  specialist_id       String
  specialist         Specialist   @relation(fields: [specialist_id], references: [id])
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum BookingStatus {
  ACTIVE
  PENDING
  CANCELED
}

enum Payment {
  TRUE
  FALSE
}